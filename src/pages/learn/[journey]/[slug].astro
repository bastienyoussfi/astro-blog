---
import "../../../styles/globals.css";
import Layout from '../../../layouts/Layout.astro';
import Icon from '../../../components/Icon.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

export async function getStaticPaths() {
  const posts = await getCollection('learn');
  return posts.map(post => ({
    params: { journey: post.data.journey, slug: post.slug },
    props: { post },
  }));
}

const { post }: { post: CollectionEntry<'learn'> } = Astro.props;
const { Content } = await post.render();

// Get the journey info
const journeys = await getCollection('journeys');
const journey = journeys.find(j => j.slug === post.data.journey);

// Get related posts
const allPosts = await getCollection('learn', ({ data }) => 
  !data.draft && data.journey === post.data.journey
);
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .slice(0, 3);

// Get related projects if any
const relatedProjects = post.data.relatedProjects 
  ? await Promise.all(
      post.data.relatedProjects.map(slug => 
        getCollection('projects').then(projects => 
          projects.find(p => p.slug === slug)
        )
      )
    ).then(projects => projects.filter(p => p !== undefined))
  : [];

const currentUrl = Astro.url.href;
---

<Layout 
  title={post.data.title}
  description={post.data.description}
  canonicalUrl={currentUrl}
  type="article"
>
  <article class="py-8 md:py-12">
    <!-- Breadcrumb Navigation -->
    <div class="mb-8 max-w-[65ch] mx-auto">
      <nav class="flex items-center gap-2 text-sm text-gray-400">
        <a href="/learn" class="hover:text-gray-200 transition-colors">Learn</a>
        <span>/</span>
        <a href={`/learn/${post.data.journey}`} class="hover:text-gray-200 transition-colors capitalize">
          {post.data.journey}
        </a>
        <span>/</span>
        <span class="text-gray-500">{post.data.title}</span>
      </nav>
    </div>

    <!-- Article Header -->
    <div class="max-w-[65ch] mx-auto mb-12">
      {/* Journey Badge */}
      {journey && (
        <div class="flex items-center gap-2 mb-4">
          <span 
            class="text-xs px-3 py-1 rounded-full font-medium flex items-center gap-1.5"
            style={`background-color: ${journey.data.color}20; color: ${journey.data.color}`}
          >
            {journey.data.title}
          </span>
          <span class="text-xs px-3 py-1 rounded-full bg-gray-800 text-gray-400 capitalize">
            {post.data.difficulty}
          </span>
        </div>
      )}

      <h1 class="text-4xl md:text-5xl font-bold mb-4">{post.data.title}</h1>
      <p class="text-xl text-gray-400 mb-4">{post.data.description}</p>
      
      <div class="flex flex-wrap gap-4 text-sm text-gray-500">
        <span>{post.data.date.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</span>
        <span>·</span>
        <span>{post.data.estimatedTime}</span>
        {post.data.category && (
          <>
            <span>·</span>
            <span>{post.data.category}</span>
          </>
        )}
      </div>
    </div>

    {/* Key Takeaways */}
    {post.data.keyTakeaways && post.data.keyTakeaways.length > 0 && (
      <div class="max-w-[65ch] mx-auto mb-12 p-6 bg-gray-900/50 border border-gray-800 rounded-lg">
        <h2 class="text-lg font-semibold mb-3 flex items-center gap-2">
          Key Takeaways
        </h2>
        <ul class="space-y-2">
          {post.data.keyTakeaways.map(takeaway => (
            <li class="flex items-start gap-2 text-gray-300">
              <span class="text-green-500 mt-1">✓</span>
              <span>{takeaway}</span>
            </li>
          ))}
        </ul>
      </div>
    )}

    {/* Prerequisites */}
    {post.data.prerequisites && post.data.prerequisites.length > 0 && (
      <div class="max-w-[65ch] mx-auto mb-12 p-4 bg-yellow-900/10 border border-yellow-800/30 rounded-lg">
        <h2 class="text-sm font-semibold mb-2 text-yellow-500 flex items-center gap-2">
          Prerequisites
        </h2>
        <ul class="text-sm text-gray-400 space-y-1">
          {post.data.prerequisites.map(prereq => (
            <li>• {prereq}</li>
          ))}
        </ul>
      </div>
    )}

    {/* Article Content */}
    <div class="max-w-[65ch] mx-auto mb-16 prose dark:prose-invert">
      <Content />
    </div>

    {/* Resources */}
    {post.data.resources && post.data.resources.length > 0 && (
      <div class="max-w-[65ch] mx-auto mb-16">
        <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
          Resources
        </h2>
        <ul class="space-y-3">
          {post.data.resources.map(resource => (
            <li>
              <a 
                href={resource.url}
                target="_blank"
                rel="noopener noreferrer"
                class="flex items-center gap-3 p-3 border border-gray-800 rounded-lg hover:border-gray-700 transition-all group"
              >
                <div class="flex-1">
                  <div class="font-medium group-hover:text-gray-300 transition-colors">
                    {resource.title}
                  </div>
                  <div class="text-xs text-gray-500 capitalize">{resource.type}</div>
                </div>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                </svg>
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}

    {/* Related Projects */}
    {relatedProjects.length > 0 && (
      <div class="max-w-[65ch] mx-auto mb-16">
        <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
          Related Projects
        </h2>
        <div class="space-y-4">
          {relatedProjects.map(project => project && (
            <a 
              href={`/projects/${project.slug}`}
              class="block p-4 border border-gray-800 rounded-lg hover:border-gray-700 transition-all group"
            >
              <h3 class="font-medium mb-2 group-hover:text-gray-300 transition-colors">
                {project.data.title}
              </h3>
              <p class="text-sm text-gray-500 mb-3">{project.data.description}</p>
              <div class="flex flex-wrap gap-2">
                {project.data.techStack.slice(0, 4).map(tech => (
                  <span class="text-xs px-2 py-1 bg-gray-800 rounded">{tech}</span>
                ))}
              </div>
            </a>
          ))}
        </div>
      </div>
    )}

    {/* Related Posts */}
    {relatedPosts.length > 0 && (
      <div class="max-w-[65ch] mx-auto mb-16">
        <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
          Continue Learning
        </h2>
        <ul class="space-y-4">
          {relatedPosts.map(relatedPost => (
            <li>
              <a 
                href={`/learn/${relatedPost.data.journey}/${relatedPost.slug}`}
                class="block p-4 border border-gray-800 rounded-lg hover:border-gray-700 transition-all group"
              >
                <h3 class="font-medium mb-1 group-hover:text-gray-300 transition-colors">
                  {relatedPost.data.title}
                </h3>
                <p class="text-sm text-gray-500">{relatedPost.data.description}</p>
              </a>
            </li>
          ))}
        </ul>
      </div>
    )}

    {/* Back to Journey */}
    <div class="max-w-[65ch] mx-auto text-center">
      <a 
        href={`/learn/${post.data.journey}`}
        class="inline-flex items-center gap-2 px-6 py-3 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to {journey?.data.title}
      </a>
    </div>
  </article>
</Layout>
