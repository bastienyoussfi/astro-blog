---
/**
 * Icon Component - Clean, consistent icon/image display
 *
 * Usage:
 *   <Icon name="rocket" size="sm" />
 *   <Icon name="devops" size="md" class="text-blue-500" />
 *   <Icon src="/images/custom.svg" alt="Custom" size="lg" />
 *
 * Sizes:
 *   xs: 16px  - Inline text icons
 *   sm: 20px  - Small badges, tags
 *   md: 24px  - Default, section headers
 *   lg: 32px  - Page headers
 *   xl: 48px  - Hero sections
 */

interface Props {
    name?: string; // Predefined icon name
    src?: string; // Custom image path
    alt?: string; // Alt text (defaults to name)
    size?: "xs" | "sm" | "md" | "lg" | "xl";
    class?: string; // Additional CSS classes
}

const { name, src, alt, size = "md", class: className = "" } = Astro.props;

// Size mapping
const sizeClasses = {
    xs: "w-4 h-4", // 16px
    sm: "w-5 h-5", // 20px
    md: "w-6 h-6", // 24px
    lg: "w-8 h-8", // 32px
    xl: "w-12 h-12", // 48px
    "2xl": "w-16 h-16", // 64px
    "3xl": "w-20 h-20", // 80px
};

// Icon mapping - easily add/change icons
const iconMap: Record<string, string> = {
    // Journey icons
    rocket: "/images/icons/rocket.svg",
    devops: "/images/icons/rocket.svg",
    brain: "/images/icons/brain.svg",
    ml: "/images/icons/brain.svg",
    "machine-learning": "/images/icons/brain.svg",

    // Section icons
    target: "/images/icons/target.svg",
    lightbulb: "/images/icons/lightbulb.svg",
    bolt: "/images/icons/bolt.svg",
    book: "/images/icons/book.svg",
    graduation: "/images/icons/graduation.svg",
    trophy: "/images/icons/trophy.svg",

    // Resource type icons
    course: "/images/icons/graduation.svg",
    article: "/images/icons/book.svg",
    tool: "/images/icons/tool.svg",
    video: "/images/icons/video.svg",

    star: "/images/star.jpeg",
};

// Determine the image source
const imageSrc = src || (name && iconMap[name]) || "/images/icons/default.svg";
const imageAlt = alt || name || "icon";
---

<img
    src={imageSrc}
    alt={imageAlt}
    class:list={[sizeClasses[size], "inline-block", className]}
    loading="lazy"
    decoding="async"
/>
